FORMAT: 1A
HOST: http://private-136e7-giasu.apiary-mock.com

# Giasu API Blueprint

This is API Blueprint for Giasu app.

+ *Mock server*: http://private-136e7-giasu.apiary-mock.com

# API Authentication

To make requests to api, you will need to set an authorization header:

* Basic authentication for public resources:

    <code> Basic-Authorization: Basic {base 64 encoded string of "##apollo2015##" string} </code>
    
* JSON Web Token authentication for protected resources:
    
    <code> Authorization: Bearer {yourtokenhere} </code>

# HTTP Status Codes

When a HTTP request return error, the HTTP status codes should be in follow list:

* **401**: User unauthorized or token expired.
* **404**: Resource is not found.
* **500**: Internal server error. 

# HTTP JSON Response

* Response format

        {
            "error_status": "0 | 1",
            "error_content": "string | json | array of json",
            "result": "string | json | array of json",
            "duration": "timestamp"
        }
    
* with errors:

        {
            "error_status": "1",
            "error_content": {
                "username": [
                    "The username field is required."
                ],
                "password": [
                    "The password field is required."
                ]
            },
            "result": "",
            "duration": "1234"
        }
    
* without errors:

        {
            "error_status": "0",
            "error_content": "",
            "result": {
                "id": 1,
                "username": "pcl"
            },
            "duration": "1234"
        }


## Group User

Resources realted to users in the API.

## Default [/users]

### Get list of user [GET]

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": [
                {
                    "id": 1,
                    "username": "pcl"
                },
                {
                    "id": 2,
                    "username": "phungnc"
                }
            ],
            "duration": "1234"
        }

### Create new user [POST]

+ Request (application/json)

        {
            "username": "phungnc",
            "email": "phungnc@gmail.com 
        }

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": {
                "id": 2,
                "username": "phungnc"
            },
            "duration": "1234"
        }

## User [/users/{user_id}]

+ Parameters
    + user_id: 1 (required, number) - ID of user

### Get detail of user [GET]

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": {
                "id": 1,
                "username": "pcl"
            },
            "duration": "1234"
        }
        
### Edit and user [POST]

+ Request (application/json)

        {
            "username": "phungnc",
            "email": "phungnc@gmail.com 
        }

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": {
                "id": 2,
                "username": "phungnc"
            },
            "duration": "1234"
        }
        
### Delete an user [DELETE]

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": "",
            "duration": "1234"
        }
## Group Question

Resources realted to questions in the API.

## Default [/questions]

### Get list of question [GET]

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": [
                {
                    "id": 1,
                    "title": "pcl",
                    "body": "",
                    "media": "",
                },
                {
                    "id": 2,
                    "title": "phungnc",
                    "body": "",
                    "media": "",
                }
            ],
            "duration": "1234"
        }

### Create new question [POST]

+ Request (application/json)

        {
          "title": "con cò bé bé",
          "body": "基本的には1 ticketに対して1 topic branch 1つの目的に対して1 commit と覚えておいて下さい。",
          "media": "",
          "userAvatar": "https://tky-chat-work-appdata.s3.amazonaws.com/avatar/363/363866.rsz.png",
          "userId": "55a49222c66f5d882d640ec6"
        }

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": {
                  "title": "con cò bé bé",
                  "body": "基本的には1 ticketに対して1 topic branch 1つの目的に対して1 commit と覚えておいて下さい。",
                  "media": "",
                  "userAvatar": "https://tky-chat-work-appdata.s3.amazonaws.com/avatar/363/363866.rsz.png",
                  "id": "55adc767021ebe155f8ca170",
                  "userId": "55a49222c66f5d882d640ec6"
            },
            "duration": "1234"
        }

## Question [/questions/{question_id}]

+ Parameters
    + question_id: 1 (required, number) - ID of question

### Get detail of question [GET]

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": {
                "id": 1,
                "title": "pcl",
                "body": "lorem ipsum lorem ipsum lorem ipsum lorem ipsum",
                "media": "http://media.doisongphapluat.com/297/2014/8/25/hot-girl-ban-bao-5.PNG"
            },
            "duration": "1234"
        }
        
### Edit a Question [PUT]

+ Request (application/json)

        {
          "title": "con cò bé bé",
          "body": "基本的には1 ticketに対して1 topic branch 1つの目的に対して1 commit と覚えておいて下さい。",
          "media": "",
          "userAvatar": "https://tky-chat-work-appdata.s3.amazonaws.com/avatar/363/363866.rsz.png",
          "userId": "55a49222c66f5d882d640ec6"
        }

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": {
                  "title": "con cò bé bé",
                  "body": "基本的には1 ticketに対して1 topic branch 1つの目的に対して1 commit と覚えておいて下さい。",
                  "media": "",
                  "userAvatar": "https://tky-chat-work-appdata.s3.amazonaws.com/avatar/363/363866.rsz.png",
                  "id": "55adc767021ebe155f8ca170",
                  "userId": "55a49222c66f5d882d640ec6"
            },
            "duration": "1234"
        }
        
### Delete a Question by id [DELETE]

+ Response 200 (application/json)

        {
            "error_status": "0",
            "error_content": "",
            "result": "",
            "duration": "1234"
        }
